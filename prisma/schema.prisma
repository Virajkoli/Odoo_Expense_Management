// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  MANAGER
  EMPLOYEE
}

enum ExpenseStatus {
  PENDING
  APPROVED
  REJECTED
}

enum ApprovalStatus {
  PENDING
  APPROVED
  REJECTED
}

enum ApprovalRuleType {
  PERCENTAGE
  SPECIFIC_APPROVER
  HYBRID
}

enum NotificationType {
  INFO
  SUCCESS
  WARNING
  ERROR
}

model Company {
  id        String   @id @default(cuid())
  name      String
  currency  String   @default("USD")
  country   String   @default("United States")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  users         User[]
  expenses      Expense[]
  approvalRules ApprovalRule[]

  @@map("companies")
}

model User {
  id            String   @id @default(cuid())
  email         String   @unique
  password      String
  name          String
  role          Role     @default(EMPLOYEE)
  companyId     String
  managerId     String?
  isManagerApprover Boolean @default(false)
  resetToken    String?
  resetTokenExpiry DateTime?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  company           Company            @relation(fields: [companyId], references: [id], onDelete: Cascade)
  manager           User?              @relation("ManagerEmployee", fields: [managerId], references: [id])
  employees         User[]             @relation("ManagerEmployee")
  expenses          Expense[]
  approvalRequests  ApprovalRequest[]
  approvalRuleApprovers ApprovalRuleApprover[]
  notifications     Notification[]

  @@index([companyId])
  @@index([managerId])
  @@index([resetToken])
  @@map("users")
}

model Expense {
  id              String        @id @default(cuid())
  amount          Float
  originalCurrency String
  convertedAmount Float?
  category        String
  description     String?
  expenseDate     DateTime
  status          ExpenseStatus @default(PENDING)
  receiptUrl      String?
  receiptPublicId String?
  userId          String
  companyId       String
  rejectionReason String?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  user             User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  company          Company           @relation(fields: [companyId], references: [id], onDelete: Cascade)
  approvalRequests ApprovalRequest[]
  notifications    Notification[]

  @@index([userId])
  @@index([companyId])
  @@index([status])
  @@map("expenses")
}

model ApprovalRule {
  id          String           @id @default(cuid())
  name        String
  description String?
  companyId   String
  ruleType    ApprovalRuleType
  percentage  Int?             // For PERCENTAGE and HYBRID rules
  sequence    Int              @default(1)
  isActive    Boolean          @default(true)
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt

  company   Company                    @relation(fields: [companyId], references: [id], onDelete: Cascade)
  approvers ApprovalRuleApprover[]

  @@index([companyId])
  @@map("approval_rules")
}

model ApprovalRuleApprover {
  id             String  @id @default(cuid())
  approvalRuleId String
  userId         String
  isSpecialApprover Boolean @default(false) // For SPECIFIC_APPROVER and HYBRID rules
  sequence       Int     @default(1)

  approvalRule ApprovalRule @relation(fields: [approvalRuleId], references: [id], onDelete: Cascade)
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([approvalRuleId, userId])
  @@index([approvalRuleId])
  @@index([userId])
  @@map("approval_rule_approvers")
}

model ApprovalRequest {
  id         String         @id @default(cuid())
  expenseId  String
  approverId String
  status     ApprovalStatus @default(PENDING)
  sequence   Int            @default(1)
  comments   String?
  createdAt  DateTime       @default(now())
  updatedAt  DateTime       @updatedAt

  expense  Expense @relation(fields: [expenseId], references: [id], onDelete: Cascade)
  approver User    @relation(fields: [approverId], references: [id], onDelete: Cascade)

  @@index([expenseId])
  @@index([approverId])
  @@index([status])
  @@map("approval_requests")
}

model Notification {
  id        String           @id @default(cuid())
  userId    String
  title     String
  message   String
  type      NotificationType @default(INFO)
  read      Boolean          @default(false)
  readAt    DateTime?
  expenseId String?
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt

  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  expense Expense? @relation(fields: [expenseId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([read])
  @@index([createdAt])
  @@map("notifications")
}
